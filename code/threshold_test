#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
Created on Fri Aug 18 20:14:07 2017

@author: sam
"""



import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import numpy as np

# Read in the image
# There are six more images available for reading
# called sample1-6.jpg, feel free to experiment with the others!
image_name = '/Users/sam/RoboND-Python-StarterKit/RoboND-Rover-Project/calibration_images/example_rock1.jpg'
image = mpimg.imread(image_name)

# Define a function to perform a color threshold
def color_within(img, rgb_lower=(0, 0, 0), rgb_upper=(0, 0, 0)):
    ###### TODO:
    # Create an empty array the same size in x and y as the image 
    # but just a single channel
    color_select = np.zeros_like(img[:,:,0])
    # Apply the thresholds for RGB and assign 1's 
    # where threshold was exceeded
    within_thresh = (img[:,:,0] >= rgb_lower[0]) \
                & (img[:,:,1] >= rgb_lower[1]) \
                & (img[:,:,2] >= rgb_lower[2]) \
                & (img[:,:,0] < rgb_upper[0]) \
                & (img[:,:,1] < rgb_upper[1]) \
                & (img[:,:,2] < rgb_upper[2])
    color_select[within_thresh] = 1
    # Return the single-channel binary image
    return color_select
    
# Define color selection criteria
###### TODO: MODIFY THESE VARIABLES TO MAKE YOUR COLOR SELECTION
red_lower = 0
green_lower = 0
blue_lower = 0       

red_upper = 160
green_upper = 160
blue_upper = 160
######
rgb_lower = (red_lower, green_lower, blue_lower)
rgb_upper = (red_upper, green_upper, blue_upper)

# pixels below the thresholds
colorsel = color_within(image, rgb_lower, rgb_upper)

# Display the original image and binary               
f, (ax1, ax2) = plt.subplots(1, 2, figsize=(10.5, 3.5), sharey=True)
f.tight_layout()
ax1.imshow(image)
ax1.set_title('Original Image', fontsize=40)

ax2.imshow(colorsel, cmap='gray')
ax2.set_title('Your Result', fontsize=40)
plt.subplots_adjust(left=0., right=1, top=0.9, bottom=0.)
plt.show() # Uncomment if running on your local machine